filter(cran, size > 100500,  r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
ummarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
group_by(cran,package)
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package, mean(size))
source('/var/folders/0v/1jnc8ctd4jx8w9n_hrszkkz80000gn/T//RtmpRdea9T/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts,20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
submit()
submit()
?spread
submit()
?spread
submit()
submit()
xtract_numeric("class5")
extract_numeric("class5")
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
submit()
submit()
submit()
package(swirl)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
1.28
.64
.64
mypdf
integrate(mypdf, 0, 1.6)
1-x*x/2
sqrt(2)
.997*.985
.997*.001
.015*.999
0.000997/(0.000997+ 0.014985)
3.5/6
21/6
help(expect_dice)
?expect_dice
??expect_dice
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5(dice_high+dice_low)
.5*(dice_high+dice_low)
.5*(expect_dice(dice_high)+expect(dice_low)
.5*(expect_dice(dice_high)+expect(dice_low))
.5*(expect_dice(dice_high)+expect_dice(dice_low))
myfunc
integrate(myfunc,0.2)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- apply(dice_sqr,dice_fair, sum)
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr*dice_fair) - 3.5^2
sum(dice_sqr*dice_high) - 3.5^2
sum(dice_sqr*dice_high) - dice_high^2
sum(dice_sqr*dice_high) - mean(dice_high)^2
edh
sum(dice_sqr*dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
library(swirl)
swirl()
pnorm(.7, mean=80, sd=10)
exig
exit
quit
info()
main()
info()
bye()
pnorm(.7, mean=80, sd=10)
qnorm(.7, mean=80, sd=10)
rnorm(.7, mean=80, sd=10)
dnorm(.7, mean=80, sd=10)
qnorm(.95, mean=1100, sd=75)
pnorm(.95, mean=1100, sd=75)
rnorm(.95, mean=1100, sd=75)
dnorm(.95, mean=1100, sd=75)
dnorm(x=14:16, mean=15, sd=10)
sum(dnorm(x=14:16, mean=15, sd=10))/100
sum(dnorm(x=14:16, mean=15, sd=10))
pnorm(x=14:16, mean=15, sd=10)
qnorm(x=14:16, mean=15, sd=10)
rnorm(x=14:16, mean=15, sd=10)
sum(dnorm(x=14:16, mean=15, sd=10))
sum(dnorm(x=14:16, mean=15, sd=1))
dnorm(x=14:16, mean=15, sd=1)
pnorm(x=14, mean=15, sd=1)
pnorm(14, mean=15, sd=1)
pnorm(14, mean=15, sd=10)
pnorm(14:16, mean=15, sd=10)
sum(pnorm(14:16, mean=15, sd=10))
sum(pnorm(14:16, mean=15, sd=1))
sum(qnorm(14:16, mean=15, sd=1))
sum(qnorm(x=14:16, mean=15, sd=1))
sum(dnorm(x=14:16, mean=15, sd=1))
sum(dnorm(14:16, mean=15, sd=1))
sum(dnorm(14:16, mean=15, sd=10))
sum(dnorm(14:16, mean=15, sd=1))
sum(dnorm(14,16, mean=15, sd=1))
sum(dnorm(c(14,16), mean=15, sd=1))
dnorm(c(14,16), mean=15, sd=1)
dnorm(c(14,16), mean=15, sd=10)
dnorm(c(14,16), mean=15, sd=1)
sum(dnorm(c(14,16), mean=15, sd=1))
rpois(10,5)
Dpois(10,5)
dpois(10,5)
dpois(10,5)
Qpois(10,5)
qpois(10,5)
ppois(10,5)
1-ppois(10,5)
1-ppois(10,5)*3
(1-ppois(10,5))*3
(1-ppois(10,5))
dpois(10,5)
dpois(10,5)*3
dnorm(70, 80, 10)
dnorm(70, mean = 80, sd=10)
dnorm(c(0,70), mean = 80, sd=10)
dnorm(c(1,70), mean = 80, sd=10)
pnorm(70, mean = 80, sd=10)
ppois(10,lambda = 10*3)
ppois(10,lambda = 5*3)
library(datasets)
data(mtcars)
view(mtcars)
View(mtcars)
x <- mtcars$wt
y <- mtcars$mgp
y <- mtcars$mpg
lm(y~x)
fit <- lm(y~x)
summary(fit)
predict(fit, data.frame(x=2),interval="confidence")
predict(fit, data.frame(x=2),interval="confidence", level=.95)
predict(fit, data.frame(x=2),interval="confidence", level=.95, df=30)
confint(fit)
confint(fit,wt)
confint(fit,"wt")
confint(fit,x)
confint(fit,x=2)
confint(fit,x=2)
predict(fit, data.frame(x=2),interval="confidence", level=.95)
summary(fit)
fit <- lm(y~x)
fit
fit <- lm(y~I(x+5)
)
fit
head(fit)
summary(fit)
fit <- lm(y~x)
summary(fit)
fit$coefficients[1]
fit$coefficients[2]
fit$coefficients[2]/fit$coefficients[1]
yhat1 <- fit$coefficients[1] + x
se1 <- sum((y - yhat1)^2)
yhat2 <- fit$coefficients[1] + fit$coefficients[2] * x
se2 <- sum((y - yhat2)^2)
ratio <- se2 / se1
ratio
x
summary(fit)
ss <- anova(fit)
ss
summary(ss)
fit
View(ss)
=847/278
847/278
847.7252/278.3219
278.3219/847.7252
ss$"Sum Sq"
ss$"Sum Sq"[1]
ss$"Sum Sq"[1]/(ss$"Sum Sq"[1]+ss$"Sum Sq"[2])
library(datasets)
mtdata <- data(mtcars)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
View(mtcars)
summary(mtcars)
mpg <- mtcars$mpg
am <- mtcars$am
plot(x=am, y=mpg)
plot(y=am, x=mpg)
factor(am, levels=c("automatic","manual")
factor(am, levels=c("automatic","manual"))
factor(am, labels=c("automatic","manual"))
am <- factor(am, labels=c("automatic","manual"))
am
lm(mpg~am)
summary(lm(mpg~am))
plot(lm(mpg~am))
plot(lm(mpg~am))
plot(mpg, am)
plot(am,mpg)
plot(am, mpg, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon", pch=19)
am.auto <-subset(factor(mtcars$am, labels=c("automatic","manual"), am="automatic")
am.auto <-subset(factor(mtcars$am, labels=c("automatic","manual"), am="automatic"))
am.auto <-subset(factor(mtcars$am, labels=c("automatic","manual")), am="automatic")
am.auto <-subset(mtcars, am="automatic")
View(am.auto)
mpg.auto <-subset(factor(mtcars, labels=c("automatic","manual"), am="automatic")
mpg.auto <-subset(factor(mtcars, labels=c("automatic","manual"), am="automatic"))
mpg.auto <-subset(factor(mtcars, labels=c("automatic","manual"), am="automatic"))
mpg.auto <-subset(factor(mtcars, labels=c("automatic","manual"), mtcars$am="automatic"))
mpg.auto <-subset(factor(mtcars, mtcars$am="0"))
mpg.auto <-subset(factor(mtcars, am="0"))
mpg.auto <-subset(factor(mtcars, am=="0"))
mpg.transmission <-subset(factor(mtcars, select=mpg,am))
mpg.transmission <-subset(factor(mtcars, select=mpg:am))
mpg.transmission <-subset(factor(mtcars, select=c(mpg:am)))
library(datasets)
data(mtcars)
mpg.transmission <-subset(factor(mtcars, select=c(mpg:am)))
mpg.transmission <-subset(factor(mtcars, am="0",select=c(mpg:am)))
mpg.transmission <-subset(mtcars, am="0",select=c(mpg:am))
View(mpg.transmission)
mpg.transmission <-subset(mtcars, am=0,select=c(mpg:am))
View(mpg.transmission)
mpg.automatic <-subset(mtcars, am=0,select=c(mpg:am))
mpg.automatic <-subset(mtcars, am=0,select=c(mpg,am))
View(mpg.automatic)
mpg.automatic <-subset(mtcars, am==0,select=c(mpg,am))
View(mpg.automatic)
mpg.manual <-subset(mtcars, am==1,select=c(mpg,am))
View(mpg.manual)
x.m <- mpg.manual$am
y.m <- mpg.manual$mpg
plot(x.m, y.m)
lm(y.m~x.m)
summary(lm(y.m~x.m))
plot(lm(y.m~x.m))
x <- mtcars$am
y <- mtcars$mpg
plot(x,y)
plot(y,x)
plot(x, y, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
boxplot(x, y, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
mpg.auto <-factor(mtcars$am, labels=c("automatic","manual"))
am <-factor(mtcars$am, labels=c("automatic","manual"))
mpg <- mtcars$mpg
am <-factor(mtcars$am, labels=c("automatic","manual"))
plot(am, mpg, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
summary(mtcars)
boxplot(am, mpg, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
plot(am, mpg, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
str(mtcars)
help(mtcars)
x <- help(mtcars)
x
boxplot(mpg~a)
boxplot(mpg~am)
boxplot(mpg~am, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
boxplot(mpg~am, main="Mileage and Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon", fill=c("yellow","orange"))
library(datasets)
data(mtcars)
mtcars$am <- factor(mtcars$am, labels= c("automatic","manual"))
manual <- subset(mtcars, am=='manual', select=c(mpg,cyl,am))
auto <- subset(mtcars, am=='automatic', select=c(mpg,cyl,am))
par(mfrow=c(1,2), oma = c(0,0,2,0))
plot(y=manual$mpg, x=manual$cyl, ylab="MPG", xlab="# Cylinders")
plot(y=auto$mpg, x=auto$cyl, ylab="MPG", xlab="# Cylinders")
mtext("MPG By Cylinder", outer = TRUE, cex = 1.5)
plot(mtcars$mpg~cyl)
plot(mtcars$mpg~mtcars$cyl)
plot(mtcars)
initialmodel <- lm(mpg ~ ., data = mtcars)
step(initialmodel, direction = "both")
lm(mpg ~ ., data = mtcars)
pairs(mtcars)
pairs(mpg~ .)
pairs(mpg~ ., data=mtcars)
pairs(mpg~ am+wt+cyl+disp, data=mtcars)
pairs(mtcars)
summary(lm(mpg~., data=mtcars))
shapiro.test(mtcars$mpg[mtcars$am=="automatic"])
mtcars$mpg[mtcars$am=="automatic"]
library(datasets)
data(mtcars)
mtcars$am <-factor(mtcars$am,
labels=c("automatic","manual"))
mpg <- mtcars$mpg
am <- mtcars$am
mean.auto <- mean(mtcars$mpg[mtcars$am=="automatic"])
sd.auto <- sd(mtcars$mpg[mtcars$am=="automatic"])
mean.manual <- mean(mtcars$mpg[mtcars$am=="manual"])
sd.manual <- sd(mtcars$mpg[mtcars$am=="manual"])
var.manual <- var(mtcars$mpg[mtcars$am=="manual"])
var.auto <- var(mtcars$mpg[mtcars$am=="automatic"])
shapiro.test(mtcars$mpg[mtcars$am=="automatic"])
shapiro.test(mtcars$mpg[mtcars$am=="manual"])
dnorm(x, mean=0, sd=1)
dnorm(mtcars$mpg[mtcars$am == "manual"], mean=0, sd=1)
qqnorm(mtcars$mpg[mtcars$am == "manual"])
qqline(mtcars$mpg[mtcars$am == "manual"])
qqplot(mtcars$mpg[mtcars$am == "manual"])
qqplot(y=mtcars$mpg[mtcars$am == "manual"])
qqplot(y=mtcars$mpg[mtcars$am == "manual"], x=mtcars$am[mtcars$am="manual"])
qqplot(y=mtcars$mpg[mtcars$am == "manual"], x=mtcars$am[mtcars$am=="manual"])
shapiro.test(mpg.manual)
shapiro.test(mpg.auto)
mpg.manual <- mtcars$mpg[mtcars$am=="manual"]
mpg.auto <- tcars$mpg[mtcars$am=="automatic"]
mpg.manual <- mtcars$mpg[mtcars$am=="manual"]
mpg.auto <- mtcars$mpg[mtcars$am=="automatic"]
shapiro.test(mpg.manual)
shapiro.test(mpg.auto)
shapiro.manual <- shapiro.test(mpg.manual)
shapiro.auto <- shapiro.test(mpg.auto)
shapiro.manual$p.value
hatvalues(mtcars)
hatvalues(lm(mpg~am)
)
hatvalues(lm(mpg~.))
hatvalues(lm(mpg~., data=mgcars))
hatvalues(lm(mpg~., data=mtcars))
summary(hatvalues(lm(mpg~., data=mtcars)))
fit <- lm(hp ~ cyl + mpg, data=mtcars) #a fake model
hatvalues(fit)
fit <- lm(mpg~am, data=mtcars) #a fake model
hatvalues(fit)
lm(mpg.manual)
am[am=="manual"]
mpg
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
hatvalues(fit)
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
plot(hatvalues(fit))
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
hist(hatvalues(fit))
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
density(hatvalues(fit))
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
plot(hatvalues(fit))
fit <- lm(mpg~am, data=mtcars[am=="manual"]) #a fake model
plot(hatvalues(fit), type="h")
lm(mpg ~ ., data = mtcars)
initialmodel <- lm(mpg ~ ., data = mtcars)
bestmodel <- step(initialmodel, direction = "both")
lm(mpg ~ ., data = mtcars)
dfbetas(fit)
dfbetas(lm(mpg~., data=mtcars))
fit <- lm(mpg~., data=mtcars)
coef(fit)
confint(fit)
fit <- lm(mpg~., data=mtcars)
confint(fit)
coef(fit)
summary(coef(fit))
fit
lm(mpg~., data=mtcars)
fitted(fit)
fit
fit$p.value
summary(fit)
summary(fit)$coef
stepModel <- step(fullModel, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
stepModel <- step(fit, k=log(nrow(mtcars)))
summary(stepModel) # results hidden
pairs(fit)
pairs(mpg~am)
pairs(mpg~.)
pairs(mtcars)
fit <- lm(mpg~am)
base <- lm(mpg~.)
summary(pairs(mtcars))
best.model <- step(fit,k=nrow(mtcars))
fit <- lm(mpg~.)
fit <- lm(mpg~., data=mtcars)
best.model <- step(fit,k=nrow(mtcars))
best.model <- step(fit)
best.model$anova
summary(best.model)
am.wt <- summary(lm(formula = mpg ~ wt + qsec + am + am:wt, data = mtcars))$coef[5,4]
am.qsec <- summary(lm(formula = mpg ~ wt + qsec + am + am:qsec, data = mtcars))$coef[5,4]
qsec.wt <- summary(lm(formula = mpg ~ wt + qsec + am + qsec:wt, data = mtcars))$coef[5,4]
best.fit.model <- lm(formula = mpg ~ wt + qsec + am + am:wt, data = mtcars)
inter <- c("am.wt","am.qsec","qsec.wt")
inter.coef <- c(am.wt, am.qsec,qsec.wt)
data.frame(inter, inter.coef)
am:wt <- summary(lm(formula = mpg ~ wt + qsec + am + am:wt, data = mtcars))$coef[5,4]
am:qsec <- summary(lm(formula = mpg ~ wt + qsec + am + am:qsec, data = mtcars))$coef[5,4]
qsec:wt <- summary(lm(formula = mpg ~ wt + qsec + am + qsec:wt, data = mtcars))$coef[5,4]
best.fit.model <- lm(formula = mpg ~ wt + qsec + am + am:wt, data = mtcars)
interaction <- c("am:wt","am:qsec","qsec:wt")
inter.coef <- c(am.wt, am.qsec,qsec.wt)
data.frame(inter, inter.coef)
install.packages("shiny")
shinyapps::setAccountInfo(name='mjurado', token='9ED34B43066120A6715BD8396F000728', secret='ID+7Lbxb7MJHziFSofiIe4IqBGAjX7XMSNJ0OsLZ')
library(shinyapps)
install.packages("devtools")
library(shinyapps)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mjurado', token='9ED34B43066120A6715BD8396F000728', secret='ID+7Lbxb7MJHziFSofiIe4IqBGAjX7XMSNJ0OsLZ')
library(rsconnect)
install.packages("rsconnect")
getwd()
setwd("~/Documents/Coursera/Developing Data Products")
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
